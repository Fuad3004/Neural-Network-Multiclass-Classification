# -*- coding: utf-8 -*-
"""sklearn_datasets_make_blobs.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16InYdS-ar_IZC-RV-2ODrj2nbbz9UIz0

#Data Input
"""

import torch
import sklearn

from sklearn.datasets import make_blobs


# https://scikit-learn.org/0.15/modules/generated/sklearn.datasets.make_blobs.html

X,y =make_blobs(n_samples=1000,
                n_features=2,
                centers=4, #no of classes (y label)
                cluster_std=1.5,
                random_state=500)

len(X),len(y)

X[:5],y[:5]

import pandas as pd

blobs=pd.DataFrame({"Feature Data 1": X[:,0],
                      "Feature Data 2": X[:,1],
                      "Output Label":y})
blobs

blobs.head(10)

"""#Convert Input Types to Tensor"""

X.shape, y.shape

X.dtype, y.dtype

type(X), type(y)

X=torch.from_numpy(X).type(torch.float)
y=torch.from_numpy(y).type(torch.LongTensor)

X.dtype , y.dtype

type(X), type(y)

X[:5],y[:5]

import matplotlib.pyplot as plt
plt.figure(figsize=(10, 7))
plt.scatter(x=X[:,0],
            y=X[:,1],
            c=y,
            cmap="RdYlBu");

"""#Split the Data"""

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test= train_test_split(X, y, test_size=0.2, random_state=500)

len(X_train), len(X_test), len(y_train), len(y_test)

"""#Build The Model

"""

# Making a device agnostic code

device="cuda" if torch.cuda.is_available() else "cpu"
device

from torch import nn

class MakeBlobModel(nn.Module):
  def __init__(self):
    super().__init__()

    self.linear_layer_stack = nn.Sequential(
      nn.Linear(in_features=2, out_features=10),
      # nn.ReLU() After running all code: our data can be linealy separable, that is why relu no important
      nn.Linear(in_features=10, out_features=10),
      # nn.ReLU()
      nn.Linear(in_features=10, out_features=4)
    )  

  def forward(self,x):
    return self.linear_layer_stack(x)

model_f_blob= MakeBlobModel().to(device)
print(model_f_blob)

"""#Train Model"""

#creat Loss Function --->>>>>> optimizer  ------>>>>> Accuracy Function

loss_fn = nn.CrossEntropyLoss()

optimizer= torch.optim.SGD(model_f_blob.parameters(), lr=0.1)

def accuracy_fn(y_true, y_preds):

  total_correct=torch.eq(y_true, y_preds).sum().item()
  acc=(total_correct/len(y_preds))*100
  return acc

X_train, y_train = X_train.to(device), y_train.to(device)
X_test, y_test = X_test.to(device), y_test.to(device)

X_train.device , y_train.device, X_test.device, y_test.device

!nvidia-smi

model_f_blob(X_train.to(device))[:5]

model_f_blob(X_train.to(device))[0].shape

y_logits=model_f_blob(X_test.to(device))
y_pred_probs = torch.softmax(y_logits, dim=1) 
print(y_logits[:5])
print(y_pred_probs[:5])

torch.sum(y_pred_probs[0])

print(y_pred_probs[0])
print(torch.argmax(y_pred_probs[0]))

torch.manual_seed(500)
torch.cuda.manual_seed(500)
epochs=1000

#put all data on target device


# --------->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Train the model <<<<<<<<<<<<<---------

for epoch in range(epochs):

  model_f_blob.eval()

  y_logits=model_f_blob(X_train)
  y_pred= torch.softmax(y_logits, dim=1).argmax(dim=1)


  loss=loss_fn(y_logits, y_train)
  
  acc= accuracy_fn(y_true = y_train,
                   y_preds = y_pred)
  
  optimizer.zero_grad()

  loss.backward()

  optimizer.step()

#--------->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>Testing <<<<<<<<<<<<<<<<<<<<<------------ 

  model_f_blob.eval()
  
  with torch.inference_mode():

    test_logits = model_f_blob(X_test)
    test_pred=torch.softmax(test_logits, dim=1).argmax(dim=1)

    test_loss=loss_fn(test_logits, y_test)

    test_acc= accuracy_fn(y_true = y_test,
                          y_preds=test_pred)
    
#--------->>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Ending <<<<<<<<<<<<<<<<<<<<<------------ 

  if epoch % 100==0:
    print(f"Epoch: {epoch} | Loss: {loss:.5f}, Accuracy: {acc:.2f}% | Test Loss: {test_loss:.5f}, Test Accuracy: {test_acc:.2f}%")

"""#Make Predction """

model_f_blob.eval()
with torch.inference_mode():
    y_logits = model_f_blob(X_test)

# View the first 10 predictions
y_logits[:10]

# Turn predicted logits in prediction probabilities
y_pred_probs = torch.softmax(y_logits, dim=1)

# Turn prediction probabilities into prediction labels
y_pred = y_pred_probs.argmax(dim=1)

# Compare first 10 model preds and test labels
print(f"Predictions: {y_pred[:10]}\nLabels: {y_test[:10]}")
print(f"Test accuracy: {accuracy_fn(y_true=y_test, y_preds=y_pred)}%")

"""#visualize"""

import numpy as np
def plot_decision_boundary(model: torch.nn.Module, X: torch.Tensor, y: torch.Tensor):
    """Plots decision boundaries of model predicting on X in comparison to y.
    Source - https://madewithml.com/courses/foundations/neural-networks/ (with modifications)
    """
    # Put everything to CPU (works better with NumPy + Matplotlib)
    model.to("cpu")
    X, y = X.to("cpu"), y.to("cpu")

    # Setup prediction boundaries and grid
    x_min, x_max = X[:, 0].min() - 0.1, X[:, 0].max() + 0.1
    y_min, y_max = X[:, 1].min() - 0.1, X[:, 1].max() + 0.1
    xx, yy = np.meshgrid(np.linspace(x_min, x_max, 101), np.linspace(y_min, y_max, 101))

    # Make features
    X_to_pred_on = torch.from_numpy(np.column_stack((xx.ravel(), yy.ravel()))).float()

    # Make predictions
    model.eval()
    with torch.inference_mode():
        y_logits = model(X_to_pred_on)

    # Test for multi-class or binary and adjust logits to prediction labels
    if len(torch.unique(y)) > 2:
        y_pred = torch.softmax(y_logits, dim=1).argmax(dim=1)  # mutli-class
    else:
        y_pred = torch.round(torch.sigmoid(y_logits))  # binary

    # Reshape preds and plot
    y_pred = y_pred.reshape(xx.shape).detach().numpy()
    plt.contourf(xx, yy, y_pred, cmap=plt.cm.RdYlBu, alpha=0.7)
    plt.scatter(X[:, 0], X[:, 1], c=y, s=40, cmap=plt.cm.RdYlBu)
    plt.xlim(xx.min(), xx.max())
    plt.ylim(yy.min(), yy.max())

    def plot_predictions(train_data, train_labels, test_data, test_labels, predictions=None):
  # """
  # Plots linear training data and test data and compares predictions.
  # """
      plt.figure(figsize=(10, 7))

      # Plot training data in blue
      plt.scatter(train_data, train_labels, c="b", s=4, label="Training data")

      # Plot test data in green
      plt.scatter(test_data, test_labels, c="g", s=4, label="Testing data")

      if predictions is not None:
          # Plot the predictions in red (predictions were made on the test data)
          plt.scatter(test_data, predictions, c="r", s=4, label="Predictions")

      # Show the legend
      plt.legend(prop={"size": 14})

plt.figure(figsize=(12, 6))
plt.subplot(1, 2, 1)
plt.title("Train")
plot_decision_boundary(model_f_blob, X_train, y_train)
plt.subplot(1, 2, 2)
plt.title("Test")
plot_decision_boundary(model_f_blob, X_test, y_test)

plot_decision_boundary(model_f_blob, X_test, y_test)



